!function(){"use strict";const e=document.querySelector(".profile__edit-button"),t=document.querySelector(".profile__add-button"),s=document.querySelector("#photos-display-modal"),r=document.querySelector(".photos__list"),i=(s.querySelector(".modal__photos-link"),s.querySelector(".modal__photos-title"),document.querySelector(".profile__avatar-btn"));class n{constructor(e,t,s,r,i){this._cardName=e.name,this._cardImage=e.link,this._cardAlt=e.name,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeCard=i,this._id=e._id,this._isLiked=e.isLiked}_getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".photos__card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".photos__like-button"),this._deleteButton=this._cardElement.querySelector(".photos__delete-button"),this._cardImageButton=this._cardElement.querySelector(".photos__image"),this._cardElementName=this._cardElement.querySelector(".photos__caption"),this._cardElementImage=this._cardElement.querySelector(".photos__image"),!0===this._isLiked&&this._likeCard()}_setCardData(){this._cardElementName.textContent=this._cardName,this._cardElementImage.src=this._cardImage,this._cardElementImage.alt=this._cardName}getCardElement(){return this._cardElement}generateCard(){return this._getView(),this._setEventListeners(),this._setCardData(),this._cardElement}getCardId(){return this._id}getCardIsLiked(){return this._isLiked}deleteCard(){this._cardElement.remove(),this._cardElement=null}_likeCard(){this._likeButton.classList.add("photos__like-button_active"),this._isLiked=!0}_dislikeCard(){this._likeButton.classList.remove("photos__like-button_active"),this._isLiked=!1}updateCardLike(){!1===this._isLiked?this._likeCard():this._dislikeCard()}_setEventListeners(){this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this)})),this._cardImageButton.addEventListener("click",(()=>{this._handleImageClick({name:this._cardName,link:this._cardImage})})),this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this)}))}}class o{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._fieldsetSelector=e.fieldsetSelector,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}class a{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("mousedown",this._closeOnOverlayClick),document.addEventListener("keydown",this._closeOnEscKey)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("mousedown",this._closeOnOverlayClick),document.removeEventListener("keydown",this._closeOnEscKey)}_closeOnOverlayClick=e=>{e.target.classList.contains("modal_opened")&&this.close()};_closeOnEscKey=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class l extends a{constructor(e,t){super(e),this._handleFormSubmit=t,this._submitButton=this._popupElement.querySelector(".modal__submit-button"),this._popupForm=this._popupElement.querySelector(".modal__container"),this._popupArray=this._popupElement.querySelectorAll(".modal__input"),this._inputList=Array.from(this._popupArray),this._originalSubmitText=this._submitButton.textContent}_getInputValue(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._originalSubmitText}setSubmit(e){this._handleFormSubmit=e}reset(){this._popupForm.reset()}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValue())})),super.setEventListeners()}}const d=new class{constructor(e){this._headers=e.headers,this._baseUrl=e.baseUrl,this._authToken=e.headers.authorization}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInformation(){return Promise.all([this.getUser(),this.getInitialCards()])}getUser(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}updateUserInformation(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}addCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers,message:"This post has been deleted"})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}dislikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}udpateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"b88b770f-9665-4862-bc7a-1a5aa8c4147a","Content-Type":"application/json"}}),h=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._renderer(e)}renderItems(e){e.forEach((e=>{this._renderer(e,"append")}))}}({renderer:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const s=new n(e,"#photos-template",f,C,g,!1).generateCard();r[t](s)}},"#card-add-form");d.getInitialCards().then((e=>{h.renderItems(e),e.forEach((e=>{}))})).catch((e=>{console.error(e)}));const c=new l("#card-add-modal",(function(e){c.renderLoading(!0),d.addCard(e).then((e=>{var t;t=e,h.addItem(t),c.close(),c.reset()})).catch(console.error).finally((()=>{c.renderLoading(!1)}))}));c.setEventListeners();const _=new l("#profile-edit-modal",(function(e){_.renderLoading(!0),d.updateUserInformation(e).then((e=>{m.setUserInfo(e),_.close(),_.reset()})).catch(console.error).finally((()=>{_.renderLoading(!1)}))}));_.setEventListeners();const u=new class extends a{constructor(e){super(e),this._imageTitle=this._popupElement.querySelector(".modal__photos-title"),this._imageLink=this._popupElement.querySelector(".modal__photos-link")}open(e){let{name:t,link:s}=e;this._imageTitle.textContent=t,this._imageLink.src=s,this._imageLink.alt=t,super.open()}}("#photos-display-modal");u.setEventListeners();const m=new class{constructor(e,t,s){this._profileName=document.querySelector(e),this._profileDescription=document.querySelector(t),this._profileAvatar=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileDescription.textContent,avatar:this._profileAvatar.src}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._profileName.textContent=t,this._profileDescription.textContent=s,this.setUserAvatar(r)}setUserAvatar(e){this._profileAvatar.src=e}}(".profile__name",".profile__description",".profile__avatar-picture"),p=new l("#delete-card-modal");p.setEventListeners();const E=new l("#avatar-update-modal",(function(e){let{name:t}=e;E.renderLoading(!0),d.udpateAvatar(t).then((()=>{m.setUserAvatar(t),E.close(),E.reset()})).catch(console.error).finally((()=>{E.renderLoading(!1)}))}));E.setEventListeners();const v={};var L;function f(e){let{name:t,link:s}=e;u.open({name:t,link:s})}function C(e){const t=e.getCardId();p.open(),p.setSubmit((()=>{p.renderLoading(!0),d.deleteCard(t).then((()=>{e.deleteCard(),p.close()})).catch(console.error).finally((()=>{p.renderLoading(!1)}))}))}function g(e){const t=e.getCardId();0==e.getCardIsLiked()?d.likeCard(t).then((()=>{e.updateCardLike()})).catch(console.error):d.dislikeCard(t).then((()=>{e.updateCardLike()})).catch(console.error)}L={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active",fieldsetSelector:".modal__fieldset"},Array.from(document.querySelectorAll(L.formSelector)).forEach((e=>{const t=new o(L,e),s=e.getAttribute("id");v[s]=t,t.enableValidation()})),e.addEventListener("click",(()=>{_.setInputValues(m.getUserInfo()),_.open(),v["profile-form"].resetValidation()})),t.addEventListener("click",(()=>{c.open(),v["card-add-form"].resetValidation()})),i.addEventListener("click",(()=>{E.open(),v["avatar-update-form"].resetValidation()})),d.getUser().then((e=>{m.setUserInfo(e)})).catch(console.error)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,