!function(){"use strict";const t=document.querySelector(".profile__edit-button"),e=document.querySelector(".profile__add-button"),s=document.querySelector("#photos-display-modal"),i=document.querySelector(".photos__list"),r=(s.querySelector(".modal__photos-link"),s.querySelector(".modal__photos-title"),document.querySelector(".profile__avatar-btn"));class o{constructor(t,e,s,i,r){this._cardName=t.name,this._cardImage=t.link,this._cardAlt=t.name,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteCard=i,this._handleLikeCard=r,this._id=t._id,this._isLiked=!1}_getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".photos__card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".photos__like-button"),this._deleteButton=this._cardElement.querySelector(".photos__delete-button"),this._cardImageButton=this._cardElement.querySelector(".photos__image"),this._cardElementName=this._cardElement.querySelector(".photos__caption"),this._cardElementImage=this._cardElement.querySelector(".photos__image")}_setCardData(){this._cardElementName.textContent=this._cardName,this._cardElementImage.src=this._cardImage,this._cardElementImage.alt=this._cardName}getCardElement(){return this._cardElement}generateCard(){return this._getView(),this._setEventListeners(),this._setCardData(),this._cardElement}getCardId(){return this._id}getCardIsLiked(){return this._isLiked}deleteCard(){this._cardElement.remove(),this._cardElement=null}likeCard(){this._likeButton.classList.add("photos__like-button_active"),this._isLiked=!0}dislikeCard(){this._likeButton.classList.remove("photos__like-button_active"),this._isLiked=!1}_setEventListeners(){this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this)})),this._cardImageButton.addEventListener("click",(()=>{this._handleImageClick({name:this._cardName,link:this._cardImage})})),this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this)}))}}class n{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._fieldsetSelector=t.fieldsetSelector,this._formElement=e}_showInputError(t){const e=this._formElement.querySelector(`.${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`.${t.id}-error`);t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}class a{constructor(t){this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("mousedown",this._closeOnOverlayClick),document.addEventListener("keydown",this._closeOnEscKey)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("mousedown",this._closeOnOverlayClick),document.removeEventListener("keydown",this._closeOnEscKey)}_closeOnOverlayClick=t=>{t.target.classList.contains("modal_opened")&&this.close()};_closeOnEscKey=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class l extends a{constructor(t,e){super(t),this._handleFormSubmit=e,this._submitButton=this._popupElement.querySelector(".modal__submit-button"),this._popupForm=this._popupElement.querySelector(".modal__container"),this._popupArray=this._popupElement.querySelectorAll(".modal__input"),this._inputList=Array.from(this._popupArray),this._originalSubmitText=this._submitButton.textContent}_getInputValue(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setLoading(t){this._submitButton.textContent=t?"Saving...":this._originalSubmitText}setSubmit(t){this._handleFormSubmit=t}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValue()),this._popupForm.reset()})),super.setEventListeners()}}r.addEventListener("click",(()=>{f.open()}));const c=new class{constructor(t){this._options=t,this._baseUrl=t.baseUrl,this._authToken=t.headers.authorization}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}getUserInformation(){return Promise.all([this.getUser(),this.getInitialCards()])}getUser(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}updateUserInformation(t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.name,about:t.about})})}addCard(t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.name,link:t.link})})}deleteCard(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"},message:"This post has been deleted"})}likeCard(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"}})}dislikeCard(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then((t=>t.ok?t.json():Promise.reject(t.statusText)))}udpateAvatar(t){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then((t=>t.ok?t.json():Promise.reject(t.statusText)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"b88b770f-9665-4862-bc7a-1a5aa8c4147a","Content-Type":"application/json"}}),d=new class{constructor(t,e){let{items:s,renderer:i}=t;this._items=s,this._renderer=i,this._container=document.querySelector(e)}addItem(t){this._renderer(t)}renderItems(){this._items.forEach((t=>{this._renderer(t,"append")}))}}({items:[{name:"Goat in a field",link:"https://images.unsplash.com/photo-1506076177893-89d54794ef41?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Snowy landscape",link:"https://images.unsplash.com/photo-1709403336601-c694b02d04ec?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Coastline ",link:"https://images.unsplash.com/photo-1707343843982-f8275f3994c5?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Galaxy of stars",link:"https://images.unsplash.com/photo-1709403338527-8229912b3a67?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Mount Everest",link:"https://images.unsplash.com/photo-1575819719798-83d97dd6949c?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"School of fish",link:"https://images.unsplash.com/photo-1707327956851-30a531b70cda?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"}],renderer:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const s=new o(t,"#photos-template",v,g,k).generateCard();i[e](s)}},"#card-add-form");c.getInitialCards().then((t=>t)).then((t=>{t.forEach((t=>{y(t)}))})).catch((t=>{console.error(t)}));const h=new l("#card-add-modal",(function(t){h.setLoading(!0),c.addCard(t).then((t=>t.json())).then((t=>{y(t),h.setLoading(!1)})).catch((t=>{console.error(t)})).finally(h.close())}));h.setEventListeners();const u=new l("#profile-edit-modal",(function(t){u.setLoading(!0),c.updateUserInformation(t).then((t=>t.json())).then((t=>{m.setUserInfo(t),u.setLoading(!1)})).catch((t=>{console.error(t)})).finally(u.close())}));u.setEventListeners();const _=new class extends a{constructor(t){super(t),this._imageTitle=this._popupElement.querySelector(".modal__photos-title"),this._imageLink=this._popupElement.querySelector(".modal__photos-link")}open(t){let{name:e,link:s}=t;this._imageTitle.textContent=e,this._imageLink.src=s,this._imageLink.alt=e,super.open()}}("#photos-display-modal");_.setEventListeners();const m=new class{constructor(t,e,s){this._profileName=document.querySelector(t),this._profileDescription=document.querySelector(e),this._profileAvatar=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileDescription.textContent,avatar:this._profileAvatar.src}}setUserInfo(t){let{name:e,about:s,avatar:i}=t;this._profileName.textContent=e,this._profileDescription.textContent=s,this._profileAvatar.src=i}setUserAvatar(t){this._profileAvatar.src=t}}(".profile__name",".profile__description",".profile__avatar-picture"),p=new l("#delete-card-modal");p.setEventListeners();const f=new l("#avatar-update-modal",(function(t){let{name:e}=t;c.udpateAvatar(e).then((()=>{m.setUserAvatar(e)})).catch((t=>{console.error("Error in updating avatar: ",t)})).finally(f.close())}));f.setEventListeners();const E={};var b;function v(t){let{name:e,link:s}=t;_.open({name:e,link:s})}function y(t){d.addItem(t)}function g(t){const e=t.getCardId();p.open(),p.setSubmit((()=>{p.setLoading(!0),c.deleteCard(e).then((()=>{t.deleteCard(),p.setLoading(!1)})).catch((t=>{console.error("Error in deleting card:",t)})).finally(p.close())}))}function k(t){const e=t.getCardId();0==t.getCardIsLiked()?c.likeCard(e).then((()=>{t.likeCard()})).catch((t=>{console.error("Error in liking card:",t)})):c.dislikeCard(e).then((()=>{t.dislikeCard()})).catch((t=>{console.error("Error in disliking card: ",t)}))}b={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active",fieldsetSelector:".modal__fieldset"},Array.from(document.querySelectorAll(b.formSelector)).forEach((t=>{const e=new n(b,t),s=t.getAttribute("id");E[s]=e,e.enableValidation()})),t.addEventListener("click",(()=>{u.setInputValues(m.getUserInfo()),u.open(),E["profile-form"].resetValidation()})),e.addEventListener("click",(()=>{h.open(),E["card-add-form"].resetValidation()})),c.getUser().then((t=>{m.setUserInfo(t)})).catch((t=>{console.error(t)})),c.getUserInformation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,