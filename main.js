!function(){"use strict";const t=document.querySelector(".profile__edit-button"),e=document.querySelector(".profile__add-button"),s=document.querySelector("#photos-display-modal"),o=document.querySelector(".photos__list");s.querySelector(".modal__photos-link"),s.querySelector(".modal__photos-title");class i{constructor(t,e,s,o){this._cardName=t.name,this._cardImage=t.link,this._cardAlt=t.name,this._cardSelector=e,this._handleImageClick=s,this._deleteButtonBtnClick=o}_getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".photos__card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".photos__like-button"),this._deleteButton=this._cardElement.querySelector(".photos__delete-button"),this._cardImageButton=this._cardElement.querySelector(".photos__image"),this._cardElementName=this._cardElement.querySelector(".photos__caption"),this._cardElementImage=this._cardElement.querySelector(".photos__image")}_handleLikeCard(){this._likeButton.classList.toggle("photos__like-button_active")}_setCardData(){this._cardElementName.textContent=this._cardName,this._cardElementImage.src=this._cardImage,this._cardElementImage.alt=this._cardName}getCardElement(){return this._cardElement}generateCard(){return this._getView(),this._setEventListeners(),this._setCardData(),this._cardElement}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeCard()})),this._deleteButton.addEventListener("click",(()=>{console.log(this._deleteButtonBtnClick),this._deleteButtonBtnClick()})),this._cardImageButton.addEventListener("click",(()=>{this._handleImageClick({name:this._cardName,link:this._cardImage})}))}}class n{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._fieldsetSelector=t.fieldsetSelector,this._formElement=e}_showInputError(t){const e=this._formElement.querySelector(`.${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`.${t.id}-error`);t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(function(t){t.preventDefault()})),this._setEventListeners()}}class r{constructor(t){this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("mousedown",this._closeOnOverlayClick),document.addEventListener("keydown",this._closeOnEscKey)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("mousedown",this._closeOnOverlayClick),document.removeEventListener("keydown",this._closeOnEscKey)}_closeOnOverlayClick=t=>{t.target.classList.contains("modal_opened")&&this.close()};_closeOnEscKey=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()}))}}class a extends r{constructor(t,e){super(t),this._handleFormSubmit=e,this._submitButton=this._popupElement.querySelector(".modal__submit-button"),this._popupForm=this._popupElement.querySelector(".modal__container"),this._popupArray=this._popupElement.querySelectorAll(".modal__input"),this._inputList=Array.from(this._popupArray)}_getInputValue(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValue()),this._popupForm.reset()})),super.setEventListeners()}}const l=new class{constructor(t){this._options=t,this._baseUrl=t.baseUrl,this._authToken=t.headers.authorization}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authToken}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}getUserInformation(){return Promise.all([this.getUser(),this.getInitialCards()])}getUser(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}updateUserInformation(t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.name,about:t.about})})}addCard(t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t.name,link:t.link})})}deleteCard(t){return fetch(`${this._baseUrl}/cards/${t._id}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"b88b770f-9665-4862-bc7a-1a5aa8c4147a","Content-Type":"application/json"}}),c=l.getInitialCards().then((t=>t)).then((t=>{console.log("test",t)})).catch((t=>{console.error(t)}));console.log(c,"test");const h=new class{constructor(t,e){let{items:s,renderer:o}=t;this._items=s,this._renderer=o,this._container=document.querySelector(e)}addItem(t){this._renderer(t)}renderItems(){console.log(this._items,"items"),this._items.forEach((t=>{this._renderer(t,"append")}))}}({items:[{name:"Goat in a field",link:"https://images.unsplash.com/photo-1506076177893-89d54794ef41?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Snowy landscape",link:"https://images.unsplash.com/photo-1709403336601-c694b02d04ec?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Coastline ",link:"https://images.unsplash.com/photo-1707343843982-f8275f3994c5?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Galaxy of stars",link:"https://images.unsplash.com/photo-1709403338527-8229912b3a67?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Mount Everest",link:"https://images.unsplash.com/photo-1575819719798-83d97dd6949c?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"School of fish",link:"https://images.unsplash.com/photo-1707327956851-30a531b70cda?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"}],renderer:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const s=new i(t,"#photos-template",b,y).generateCard();o[e](s),console.log(o)}},"#card-add-form");h.renderItems();const u=new a("#card-add-modal",(function(t){l.addCard(t).then((t=>t.json())).then((t=>{var e;e=t,h.addItem(e)})).catch((t=>{console.error(t)})).finally(u.close())}));u.setEventListeners();const d=new a("#profile-edit-modal",(function(t){l.updateUserInformation(t).then((t=>t.json())).then((t=>{m.setUserInfo(t)})).catch((t=>{console.error(t)})).finally(d.close())}));d.setEventListeners();const _=new class extends r{constructor(t){super(t),this._imageTitle=this._popupElement.querySelector(".modal__photos-title"),this._imageLink=this._popupElement.querySelector(".modal__photos-link")}open(t){let{name:e,link:s}=t;this._imageTitle.textContent=e,this._imageLink.src=s,this._imageLink.alt=e,super.open()}}("#photos-display-modal"),m=new class{constructor(t,e){this._profileName=document.querySelector(t),this._profileDescription=document.querySelector(e)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileDescription.textContent}}setUserInfo(t){let{name:e,about:s}=t;this._profileName.textContent=e,this._profileDescription.textContent=s}}(".profile__name",".profile__description");_.setEventListeners();const p=new class extends r{constructor(t,e){super(t),this._handleFormSubmit=e,this._popupForm=this._popupElement.querySelector(".modal__container")}setEventListeners(){console.log("popupWithDelete"),this._popupForm.addEventListener("submit",(()=>{console.log(this._handleFormSubmit,"form sumbit"),this._handleFormSubmit()})),super.setEventListeners()}}("#delete-card-modal",(function(){}));p.setEventListeners();const f={};var E;function b(t){let{name:e,link:s}=t;_.open({name:e,link:s})}function y(){p.open()}E={formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active",fieldsetSelector:".modal__fieldset"},Array.from(document.querySelectorAll(E.formSelector)).forEach((t=>{const e=new n(E,t),s=t.getAttribute("id");f[s]=e,e.enableValidation()})),t.addEventListener("click",(()=>{d.setInputValues(m.getUserInfo()),d.open(),f["profile-form"].resetValidation()})),e.addEventListener("click",(()=>{u.open(),f["card-add-form"].resetValidation()})),l.getUser().then((t=>{console.log(t)})).catch((t=>{console.error(t)})),l.getUserInformation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,